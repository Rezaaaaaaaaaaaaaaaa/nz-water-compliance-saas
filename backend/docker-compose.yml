version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: compliance-saas-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: compliance_saas
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - compliance-network

  # Redis for caching and job queue
  redis:
    image: redis:7-alpine
    container_name: compliance-saas-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ""
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - compliance-network

  # Adminer - Database management UI (optional, for development)
  adminer:
    image: adminer:latest
    container_name: compliance-saas-adminer
    restart: unless-stopped
    ports:
      - '8080:8080'
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - compliance-network
    profiles:
      - dev

  # RedisInsight - Redis management UI (optional, for development)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: compliance-saas-redis-insight
    restart: unless-stopped
    ports:
      - '8001:8001'
    volumes:
      - redis_insight_data:/db
    depends_on:
      - redis
    networks:
      - compliance-network
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  redis_insight_data:
    driver: local

networks:
  compliance-network:
    driver: bridge
