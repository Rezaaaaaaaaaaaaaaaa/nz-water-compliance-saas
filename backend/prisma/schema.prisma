// Prisma Schema for NZ Water Compliance SaaS
// Database schema designed for Taumata Arowai regulatory compliance

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USERS & ORGANIZATIONS
// ============================================================================

enum UserRole {
  SYSTEM_ADMIN // Full system access
  ORG_ADMIN // Organization administration
  COMPLIANCE_MANAGER // Can submit to regulator
  INSPECTOR // Field staff, data entry
  AUDITOR // Read-only, regulator role
}

model Organization {
  id               String           @id @default(cuid())
  name             String
  type             OrganizationType
  region           String
  populationServed Int?
  contactEmail     String
  contactPhone     String?
  address          String?

  // Metadata
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete

  // Relations
  users                 User[]
  assets                Asset[]
  documents             Document[]
  compliancePlans       CompliancePlan[]
  auditLogs             AuditLog[]
  notifications         Notification[]
  reports               Report[]
  complianceScores      ComplianceScore[]
  waterSupplyComponents WaterSupplyComponent[]
  waterQualityTests     WaterQualityTest[]
  ruleCompliances       RuleCompliance[]
  aiUsageLogs           AIUsageLog[]
  aiUsageQuotas         AIUsageQuota[]
  aiConversations       AIConversation[]

  @@index([type])
  @@index([deletedAt])
}

enum OrganizationType {
  COUNCIL
  CCO
  PRIVATE_OPERATOR
  IWI_AUTHORITY
}

model User {
  id             String   @id @default(cuid())
  auth0Id        String?  @unique // For Auth0 integration
  email          String   @unique
  firstName      String
  lastName       String
  role           UserRole
  organizationId String

  // Account status
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?

  // Preferences
  notificationPreferences Json?

  // Metadata
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete

  // Relations
  organization            Organization     @relation(fields: [organizationId], references: [id])
  createdDocuments        Document[]       @relation("DocumentCreator")
  uploadedDocuments       Document[]       @relation("DocumentUploader")
  createdCompliancePlans  CompliancePlan[] @relation("CompliancePlanCreator")
  assignedCompliancePlans CompliancePlan[] @relation("CompliancePlanAssignee")
  auditLogs               AuditLog[]
  notifications           Notification[]
  createdReports          Report[]         @relation("ReportCreatedBy")
  submittedReports        Report[]         @relation("ReportSubmittedBy")
  aiUsageLogs             AIUsageLog[]
  aiConversations         AIConversation[]

  @@index([organizationId])
  @@index([email])
  @@index([role])
  @@index([deletedAt])
}

// ============================================================================
// ASSETS
// ============================================================================

enum AssetType {
  WATER_TREATMENT_PLANT
  RESERVOIR
  PUMP_STATION
  PIPELINE
  VALVE
  METER
  CHLORINATION_STATION
  UV_DISINFECTION
  FILTRATION_SYSTEM
  INTAKE_STRUCTURE
  STORAGE_TANK
  PRESSURE_REDUCING_VALVE
  OTHER
}

enum AssetCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  VERY_POOR
  UNKNOWN
}

model Asset {
  id             String @id @default(cuid())
  organizationId String

  // Asset Details
  name        String
  type        AssetType
  description String?
  assetCode   String?   @unique

  // Location (required for emergency response)
  latitude  Float?
  longitude Float?
  address   String?
  location  String? // General location description

  // Asset Management (regulatory requirements)
  installationDate    DateTime?
  expectedLife        Int? // Years
  replacementValue    Decimal?       @db.Decimal(12, 2)
  condition           AssetCondition @default(UNKNOWN)
  lastInspectionDate  DateTime?
  nextInspectionDate  DateTime?
  maintenanceSchedule String? // e.g., "Monthly", "Quarterly"

  // Technical specifications
  capacity     String? // e.g., "500 L/min", "1000 m3"
  material     String? // e.g., "PVC", "Steel", "Concrete"
  manufacturer String?
  modelNumber  String?
  serialNumber String?

  // Criticality Assessment
  isCritical Boolean   @default(false)
  riskLevel  RiskLevel @default(LOW)

  // Custom Fields (JSON for flexibility)
  metadata Json?

  // Metadata
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete

  // Relations
  organization    Organization          @relation(fields: [organizationId], references: [id])
  documents       AssetDocument[]
  compliancePlans AssetCompliancePlan[]

  @@index([organizationId])
  @@index([type])
  @@index([condition])
  @@index([isCritical])
  @@index([deletedAt])
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// ============================================================================
// DOCUMENTS
// ============================================================================

enum DocumentType {
  DWSP // Drinking Water Safety Plan
  ASSET_MANAGEMENT_PLAN
  COMPLIANCE_REPORT
  INSPECTION_REPORT
  WATER_QUALITY_REPORT
  INCIDENT_REPORT
  MAINTENANCE_RECORD
  TRAINING_CERTIFICATE
  AUDIT_REPORT
  POLICY
  PROCEDURE
  DRAWING
  PHOTO
  OTHER
}

model Document {
  id             String @id @default(cuid())
  organizationId String

  // Document Details
  title        String
  description  String?
  documentType DocumentType

  // File Storage (S3)
  fileKey  String // S3 object key
  fileSize Int // Bytes
  fileType String // MIME type (alias: mimeType)
  fileName String // Original filename

  // Version Control (regulatory requirement)
  version          String  @default("1.0")
  parentDocumentId String? // Previous version

  // Categorization
  tags String[]

  // Access Control
  createdById  String
  uploadedById String? // Alias for createdById (for export compatibility)
  isPublic     Boolean @default(false)

  // Regulatory Compliance
  effectiveDate  DateTime?
  expiryDate     DateTime?
  reviewDate     DateTime?
  retentionUntil DateTime? // Document retention period

  // Timestamps
  uploadedAt DateTime? // Explicit upload timestamp

  // Metadata
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete

  // Relations
  organization    Organization             @relation(fields: [organizationId], references: [id])
  createdBy       User                     @relation("DocumentCreator", fields: [createdById], references: [id])
  uploadedBy      User?                    @relation("DocumentUploader", fields: [uploadedById], references: [id])
  parentDocument  Document?                @relation("DocumentVersions", fields: [parentDocumentId], references: [id])
  childVersions   Document[]               @relation("DocumentVersions")
  assets          AssetDocument[]
  compliancePlans CompliancePlanDocument[]

  @@index([organizationId])
  @@index([documentType])
  @@index([createdById])
  @@index([uploadedById])
  @@index([deletedAt])
}

// Junction table for Asset-Document relationship
model AssetDocument {
  id         String   @id @default(cuid())
  assetId    String
  documentId String
  createdAt  DateTime @default(now())

  asset    Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([assetId, documentId])
  @@index([assetId])
  @@index([documentId])
}

// ============================================================================
// COMPLIANCE PLANS (Drinking Water Safety Plans)
// ============================================================================

enum CompliancePlanStatus {
  DRAFT
  IN_REVIEW
  APPROVED
  SUBMITTED
  ACCEPTED
  REJECTED
  REQUIRES_UPDATE
}

enum CompliancePlanType {
  DWSP // Drinking Water Safety Plan
  WASTEWATER_PLAN
  ASSET_MANAGEMENT_PLAN
  EMERGENCY_RESPONSE_PLAN
  WATER_CONSERVATION_PLAN
}

model CompliancePlan {
  id             String @id @default(cuid())
  organizationId String

  // Plan Details
  planType    CompliancePlanType
  title       String
  description String?
  status      CompliancePlanStatus @default(DRAFT)
  version     String               @default("1.0")

  // Ownership and assignment
  createdById  String? // User who created the plan
  assignedToId String? // User assigned to manage the plan

  // Taumata Arowai Requirements
  waterSupplyName    String?
  supplyPopulation   Int?
  sourceTypes        String[] // e.g., ["BORE", "SURFACE_WATER"]
  treatmentProcesses String[]

  // Planning dates
  reportingPeriod String? // e.g., "2024 Q1", "2024 Annual"
  targetDate      DateTime? // Target completion date
  reviewDate      DateTime? // Scheduled review date (alias for nextReviewDate)

  // Risk Assessment (DWSP Section 2)
  hazards            Json? // Array of hazardous events
  riskAssessments    Json? // Risk matrix data
  preventiveMeasures Json? // Control measures

  // Monitoring (DWSP Sections 3-4)
  operationalMonitoring  Json? // Table 3.3
  verificationMonitoring Json? // Table 3.4
  correctiveActions      Json? // Table 3.5

  // Management (DWSP Section 5)
  managementProcedures Json?
  communicationPlan    Json?
  documentControl      Json?

  // Submission to Regulator
  submittedAt            DateTime?
  submittedBy            String?
  acknowledgmentReceived DateTime?
  regulatorFeedback      String?

  // Review Schedule (annual review required)
  lastReviewDate DateTime?
  nextReviewDate DateTime?
  reviewNotes    String?

  // Approval Workflow
  approvedBy    String?
  approvedAt    DateTime?
  approvalNotes String?

  // DWSP Element 7: Incident & Emergency Response
  incidentResponsePlan      Json? // Emergency procedures and contacts
  emergencyContactPrimary   String? // Primary emergency contact name
  emergencyContactPhone     String? // Primary contact phone
  emergencyContactSecondary String? // Backup contact name
  emergencyContactPhone2    String? // Backup contact phone

  // DWSP Element 8: Management (enhancements)
  waterSupplyManager      String? // Person responsible for supply
  waterSupplyManagerPhone String? // Manager contact
  operatorCompetency      Json? // Staff training records
  staffRoles              Json? // Role assignments and responsibilities

  // DWSP Element 10: Improvement Planning
  improvementPlan Json? // Planned upgrades and improvements

  // Metadata
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete

  // Relations
  organization Organization             @relation(fields: [organizationId], references: [id])
  createdBy    User?                    @relation("CompliancePlanCreator", fields: [createdById], references: [id])
  assignedTo   User?                    @relation("CompliancePlanAssignee", fields: [assignedToId], references: [id])
  documents    CompliancePlanDocument[]
  assets       AssetCompliancePlan[]

  @@index([organizationId])
  @@index([status])
  @@index([planType])
  @@index([createdById])
  @@index([assignedToId])
  @@index([deletedAt])
}

// Junction table for CompliancePlan-Document relationship
model CompliancePlanDocument {
  id               String   @id @default(cuid())
  compliancePlanId String
  documentId       String
  createdAt        DateTime @default(now())

  compliancePlan CompliancePlan @relation(fields: [compliancePlanId], references: [id], onDelete: Cascade)
  document       Document       @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([compliancePlanId, documentId])
  @@index([compliancePlanId])
  @@index([documentId])
}

// Junction table for Asset-CompliancePlan relationship
model AssetCompliancePlan {
  id               String   @id @default(cuid())
  assetId          String
  compliancePlanId String
  createdAt        DateTime @default(now())

  asset          Asset          @relation(fields: [assetId], references: [id], onDelete: Cascade)
  compliancePlan CompliancePlan @relation(fields: [compliancePlanId], references: [id], onDelete: Cascade)

  @@unique([assetId, compliancePlanId])
  @@index([assetId])
  @@index([compliancePlanId])
}

// ============================================================================
// AUDIT LOGS (Immutable, 7-year retention)
// ============================================================================

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  SUBMIT
  APPROVE
  REJECT
  REGULATION_REVIEW_TRIGGERED
  EXPORT
  LOGIN
  LOGOUT
  PERMISSION_DENIED
  DWSP_CREATED
  DWSP_SUBMITTED
  REPORT_GENERATED
  ASSET_CREATED
  DOCUMENT_UPLOADED
  COMPLIANCE_VIOLATION
  CALCULATE_COMPLIANCE_SCORE
  VIEW_ANALYTICS
  SEND_EMAIL
}

model AuditLog {
  id             String  @id @default(cuid())
  organizationId String
  userId         String?

  // Action Details
  action       AuditAction
  resourceType String // e.g., "Asset", "Document", "CompliancePlan"
  resourceId   String

  // Change Tracking (for UPDATE actions)
  changes Json? // { before: {...}, after: {...} }

  // Context
  ipAddress String?
  userAgent String?
  sessionId String?
  reason    String? // Why action was taken

  // Metadata
  timestamp DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  user         User?        @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([userId])
  @@index([action])
  @@index([resourceType, resourceId])
  @@index([timestamp])
}

// ============================================================================
// REPORTS
// ============================================================================

enum ReportType {
  ANNUAL_COMPLIANCE
  INFORMATION_DISCLOSURE
  ASSET_CONDITION
  WATER_QUALITY
  FINANCIAL_PERFORMANCE
  CUSTOM
  DWQAR // Drinking Water Quality Assurance Rules
}

enum ReportStatus {
  DRAFT
  PENDING
  GENERATING
  COMPLETED
  FAILED
  SUBMITTED
}

model Report {
  id             String  @id @default(cuid())
  organizationId String
  createdById    String? // User who created the report
  submittedById  String? // User who submitted the report

  // Report Details
  reportType       ReportType
  title            String
  description      String?
  status           ReportStatus @default(PENDING)
  reportingPeriod  String? // e.g., "2024 Q1", "2024 Annual"

  // DWQAR specific fields
  hinekorakoSubmissionId String? // Hinekōrako platform submission ID

  // Parameters
  parameters Json? // Date range, filters, etc.

  // Output
  fileKey  String? // S3 key for generated report
  fileSize Int?
  fileType String? // pdf, xlsx, etc.
  data     Json? // Report data/content

  // Job Tracking
  jobId        String? // BullMQ job ID
  startedAt    DateTime?
  completedAt  DateTime?
  errorMessage String?

  // Submission tracking
  submittedAt DateTime?

  // Soft delete
  deletedAt DateTime?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  createdBy    User?        @relation("ReportCreatedBy", fields: [createdById], references: [id])
  submittedBy  User?        @relation("ReportSubmittedBy", fields: [submittedById], references: [id])

  @@index([organizationId])
  @@index([reportType])
  @@index([status])
  @@index([createdById])
  @@index([deletedAt])
  @@index([reportingPeriod])
  @@unique([organizationId, reportType, reportingPeriod])
}

// ============================================================================
// NOTIFICATIONS
// ============================================================================

enum NotificationType {
  DEADLINE_REMINDER
  PLAN_APPROVED
  PLAN_REJECTED
  DOCUMENT_UPLOADED
  INSPECTION_DUE
  REVIEW_REQUIRED
  SYSTEM_ALERT
}

model Notification {
  id             String @id @default(cuid())
  organizationId String
  userId         String

  // Notification Details
  type     NotificationType
  title    String
  message  String
  link     String? // Link to relevant resource
  metadata Json? // Additional notification data

  // Delivery
  isRead      Boolean   @default(false)
  readAt      DateTime?
  emailSent   Boolean   @default(false)
  emailSentAt DateTime?

  // Metadata
  createdAt DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@index([createdAt])
}

// ============================================================================
// COMPLIANCE SCORING
// ============================================================================

model ComplianceScore {
  id             String @id @default(cuid())
  organizationId String

  // Overall and component scores
  overallScore    Int // 0-100
  dwspScore       Int // 0-100
  assetScore      Int // 0-100
  documentScore   Int // 0-100
  reportingScore  Int // 0-100
  riskScore       Int // 0-100
  timelinessScore Int // 0-100

  // Metadata
  calculatedAt DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])

  @@index([organizationId, calculatedAt])
}

// ============================================================================
// WATER QUALITY & DWQAR REPORTING
// ============================================================================

// Water Supply Components (Treatment plants, zones, sources)
model WaterSupplyComponent {
  id             String @id @default(cuid())
  organizationId String
  componentId    String @unique // Hinekōrako ID (e.g., "TP04026")

  // Component Details
  name          String
  componentType WaterSupplyComponentType
  description   String?

  // Population & Capacity
  populationServed Int?
  capacity         String? // "500 L/min"

  // Location
  latitude  Float?
  longitude Float?
  address   String?

  // Status
  isActive         Boolean   @default(true)
  commissionedDate DateTime?

  // Metadata
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  organization      Organization       @relation(fields: [organizationId], references: [id])
  waterQualityTests WaterQualityTest[]
  ruleCompliances   RuleCompliance[]

  @@index([organizationId])
  @@index([componentId])
  @@index([deletedAt])
}

enum WaterSupplyComponentType {
  TREATMENT_PLANT
  DISTRIBUTION_ZONE
  SOURCE_BORE
  SOURCE_SURFACE_WATER
  STORAGE_RESERVOIR
  PUMPING_STATION
}

// Taumata Arowai Compliance Rules (381 rules from DWQAR template)
model ComplianceRule {
  id     String @id @default(cuid())
  ruleId String @unique // "T1.8-ecol", "T2.1-pH", etc.

  // Rule Details
  category    ComplianceRuleCategory?
  description String?
  parameter   String? // "ecol", "pH", "turbidity"

  // Limits & Thresholds
  maxValue  Decimal? @db.Decimal(12, 4)
  minValue  Decimal? @db.Decimal(12, 4)
  unit      String?
  frequency String? // Sampling frequency (e.g., "Daily", "Weekly", "Monthly")

  // Applicability
  applicability  String? // Which supply sizes/types
  supplyCategory String? // "Small", "Medium", "Large"

  // Lifecycle
  effectiveDate  DateTime?
  supersededDate DateTime?
  isActive       Boolean   @default(true)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  waterQualityTests WaterQualityTest[]
  ruleCompliances   RuleCompliance[]

  @@index([ruleId])
  @@index([category])
  @@index([isActive])
}

enum ComplianceRuleCategory {
  WATER_QUALITY
  TREATMENT
  MONITORING
  OPERATIONAL
  VERIFICATION
  MANAGEMENT
  BACTERIOLOGICAL
  CHEMICAL
  RADIOLOGICAL
  PROTOZOA
}

// Individual Water Quality Test Results
model WaterQualityTest {
  id             String @id @default(cuid())
  organizationId String
  componentId    String // FK to WaterSupplyComponent
  ruleId         String // FK to ComplianceRule

  // Sample Details
  externalSampleId String? // Lab tracking reference
  sampleDate       DateTime
  parameter        WaterParameter

  // Test Results
  valuePrefix String? // "<", ">", or null
  value       Decimal @db.Decimal(12, 4)
  unit        String // "mpn/100mL", "cfu/100mL", "NTU", "mg/L"

  // Compliance Determination
  compliesWithRule Boolean
  sourceClass      String? // Water source classification
  notes            String?

  // Laboratory Information
  labName          String?
  labAccreditation String? // IANZ accreditation number
  testMethod       String? // e.g., "APHA 9223"

  // Sample Location & Context
  samplingPoint     String? // Specific location within component
  samplerName       String?
  weatherConditions String?
  temperature       Decimal? @db.Decimal(5, 2)

  // Metadata
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete

  // Relations
  organization Organization         @relation(fields: [organizationId], references: [id])
  component    WaterSupplyComponent @relation(fields: [componentId], references: [id])
  rule         ComplianceRule       @relation(fields: [ruleId], references: [id])

  @@index([organizationId])
  @@index([componentId])
  @@index([ruleId])
  @@index([sampleDate])
  @@index([parameter])
  @@index([deletedAt])
}

enum WaterParameter {
  // Bacteriological
  ECOL // E. coli
  ENTEROCOCCI
  COLIFORM_TOTAL

  // Protozoa
  CRYPTOSPORIDIUM
  GIARDIA

  // Chemical - Inorganic
  PH
  TURBIDITY
  CHLORINE_FREE
  CHLORINE_TOTAL
  FLUORIDE
  LEAD
  COPPER
  ARSENIC
  NITRATE
  NITRITE
  AMMONIA
  IRON
  MANGANESE
  ALUMINIUM

  // Chemical - Organic
  TRIHALOMETHANES
  HAA5 // Haloacetic acids
  PESTICIDES

  // Physical
  TEMPERATURE
  CONDUCTIVITY
  HARDNESS
  ALKALINITY

  // Other
  OTHER
}

// Per-Rule Compliance Status for DWQAR Reporting
model RuleCompliance {
  id             String @id @default(cuid())
  organizationId String
  ruleId         String // FK to ComplianceRule
  componentId    String // FK to WaterSupplyComponent

  // Reporting Period
  reportingPeriod String // "2024-Q1", "2024-Annual"
  startDate       DateTime
  endDate         DateTime

  // Compliance Status
  complies            Boolean
  nonCompliantPeriods Int     @default(0)
  totalSamples        Int     @default(0)
  compliantSamples    Int     @default(0)

  // Details
  notes             String?
  correctiveActions String? // Actions taken for non-compliance

  // Metadata
  calculatedAt    DateTime @default(now())
  lastCalculated  DateTime @default(now()) // Last time compliance was calculated
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  organization Organization         @relation(fields: [organizationId], references: [id])
  rule         ComplianceRule       @relation(fields: [ruleId], references: [id])
  component    WaterSupplyComponent @relation(fields: [componentId], references: [id])

  @@unique([ruleId, componentId, reportingPeriod])
  @@unique([organizationId, ruleId, componentId, reportingPeriod])
  @@index([organizationId])
  @@index([reportingPeriod])
  @@index([complies])
}

// ============================================================================
// AI & MACHINE LEARNING
// ============================================================================

// AI Usage Tracking for Cost Control and Rate Limiting
model AIUsageLog {
  id             String @id @default(cuid())
  organizationId String
  userId         String

  // Request Details
  feature     AIFeature // What AI feature was used
  operation   String // "analyze_dwsp", "ask_question", etc.
  model       String // "claude-3-5-sonnet-20241022"

  // Token Usage (for billing)
  inputTokens  Int
  outputTokens Int
  totalTokens  Int

  // Cost Calculation (in USD cents)
  estimatedCost Int // Calculated cost in cents

  // Request/Response Metadata
  requestSize  Int? // Bytes of request
  responseSize Int? // Bytes of response
  latencyMs    Int? // Response time in milliseconds

  // Status
  success      Boolean
  errorMessage String?

  // Metadata
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@index([organizationId, createdAt])
  @@index([userId, createdAt])
  @@index([feature])
  @@index([createdAt])
}

// Monthly AI Usage Quotas and Limits
model AIUsageQuota {
  id             String @id @default(cuid())
  organizationId String

  // Quota Period
  year  Int // 2025
  month Int // 1-12

  // Quotas (per month)
  maxRequests     Int @default(100) // Max API calls per month
  maxTokens       Int @default(100000) // Max tokens per month
  maxCostCents    Int @default(1000) // Max cost in cents ($10)

  // Current Usage
  requestCount    Int @default(0)
  tokenCount      Int @default(0)
  costCents       Int @default(0)

  // Per-feature limits
  maxChatRequests           Int @default(50)
  maxDocumentAnalyses       Int @default(20)
  maxWaterQualityAnalyses   Int @default(20)
  maxReportGenerations      Int @default(10)

  // Current per-feature usage
  chatRequestCount          Int @default(0)
  documentAnalysisCount     Int @default(0)
  waterQualityAnalysisCount Int @default(0)
  reportGenerationCount     Int @default(0)

  // Quota Tier
  tier String @default("FREE") // FREE, BASIC, PREMIUM

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, year, month])
  @@index([organizationId])
  @@index([year, month])
}

// AI Chat Conversation History (for context and audit)
model AIConversation {
  id             String @id @default(cuid())
  organizationId String
  userId         String

  // Conversation Details
  sessionId String // Group related messages
  role      String // "user" or "assistant"
  message   String @db.Text

  // Context
  feature AIFeature
  metadata Json? // Additional context data

  // Metadata
  createdAt DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@index([organizationId, sessionId, createdAt])
  @@index([userId, createdAt])
  @@index([sessionId])
}

// AI Features Enum
enum AIFeature {
  COMPLIANCE_ASSISTANT // Chatbot Q&A
  DWSP_ANALYSIS // Document analysis
  WATER_QUALITY_ANALYSIS // Anomaly detection
  REPORT_GENERATION // Report summaries
  REGULATORY_ANALYSIS // Regulation interpretation
  RISK_ASSESSMENT // AI-assisted risk analysis
}
